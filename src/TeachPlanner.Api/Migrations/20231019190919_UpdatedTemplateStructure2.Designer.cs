// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeachPlanner.Api.Database;

#nullable disable

namespace TeachPlanner.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231019190919_UpdatedTemplateStructure2")]
    partial class UpdatedTemplateStructure2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CalendarSchoolEvent", b =>
                {
                    b.Property<Guid>("CalendarId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SchoolEventsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CalendarId", "SchoolEventsId");

                    b.HasIndex("SchoolEventsId");

                    b.ToTable("CalendarSchoolEvent");
                });

            modelBuilder.Entity("DayPlanSchoolEvent", b =>
                {
                    b.Property<Guid>("DayPlanId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SchoolEventsId")
                        .HasColumnType("char(36)");

                    b.HasKey("DayPlanId", "SchoolEventsId");

                    b.HasIndex("SchoolEventsId");

                    b.ToTable("DayPlanSchoolEvent");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Assessments.Assessment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<string>("AssessmentType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("DateConducted")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("LessonPlanId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PlanningNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("YearLevel")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("LessonPlanId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("assessments", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Calendar.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TermEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TermNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("TermStart")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("calendar", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Common.Planner.SchoolEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EventEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EventStart")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("FullDay")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("school_events", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.CurriculumSubjects.ContentDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CurriculumCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid?>("StrandId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Substrand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("StrandId");

                    b.ToTable("content_descriptions", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.CurriculumSubjects.CurriculumSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("TermPlanId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TermPlanId");

                    b.ToTable("curriculum_subjects", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.CurriculumSubjects.Elaboration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ContentDescriptionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ContentDescriptionId");

                    b.ToTable("elaborations", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.CurriculumSubjects.Strand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("YearLevelId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("YearLevelId");

                    b.ToTable("strands", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.CurriculumSubjects.YearLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AchievementStandard")
                        .HasColumnType("longtext");

                    b.Property<int?>("BandLevelValue")
                        .HasColumnType("int");

                    b.Property<Guid>("CurriculumSubjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("YearLevelDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("YearLevelValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumSubjectId");

                    b.ToTable("year_levels", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.LessonPlans.LessonPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateOnly>("LessonDate")
                        .HasColumnType("date");

                    b.Property<int>("NumberOfPeriods")
                        .HasColumnType("int");

                    b.Property<string>("PlanningNotes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StartPeriod")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("WeekPlannerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("YearDataId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("WeekPlannerId");

                    b.HasIndex("YearDataId");

                    b.ToTable("lesson_plans", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.LessonPlans.LessonPlanResource", b =>
                {
                    b.Property<Guid>("LessonPlanId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("char(36)");

                    b.HasKey("LessonPlanId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("lesson_plan_resources", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.PlannerTemplates.DayPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("WeekPlannerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WeekPlannerId");

                    b.ToTable("day_plans", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.PlannerTemplates.WeekPlannerTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("week_planner_templates", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Reports.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("YearLevel")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Students.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("YearDataId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("YearDataId");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Teachers.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<string>("AssociatedStrands")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAssessment")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("resources", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Teachers.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("teachers", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.TermPlanners.TermPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("TermNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("TermPlannerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TermPlannerId");

                    b.ToTable("term_plans", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.TermPlanners.TermPlanner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<int>("CalendarYear")
                        .HasColumnType("int");

                    b.Property<Guid>("YearDataId")
                        .HasColumnType("char(36)");

                    b.Property<string>("_yearLevels")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("YearLevels");

                    b.HasKey("Id");

                    b.HasIndex("YearDataId")
                        .IsUnique();

                    b.ToTable("term_planner", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.WeekPlanners.WeekPlanner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TermNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("WeekPlannerTemplateId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("WeekStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<Guid>("YearDataId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WeekPlannerTemplateId");

                    b.HasIndex("YearDataId");

                    b.ToTable("week_planner", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.YearDataRecords.YearData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<int>("CalendarYear")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TermPlannerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("_yearLevelsTaught")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("YearLevels");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TermPlannerId")
                        .IsUnique();

                    b.ToTable("yeardata", (string)null);
                });

            modelBuilder.Entity("CalendarSchoolEvent", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.Calendar.Calendar", null)
                        .WithMany()
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Api.Domain.Common.Planner.SchoolEvent", null)
                        .WithMany()
                        .HasForeignKey("SchoolEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DayPlanSchoolEvent", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.PlannerTemplates.DayPlan", null)
                        .WithMany()
                        .HasForeignKey("DayPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Api.Domain.Common.Planner.SchoolEvent", null)
                        .WithMany()
                        .HasForeignKey("SchoolEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Assessments.Assessment", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.LessonPlans.LessonPlan", null)
                        .WithMany("Assessments")
                        .HasForeignKey("LessonPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Api.Domain.Students.Student", null)
                        .WithMany("Assessments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Api.Domain.CurriculumSubjects.CurriculumSubject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Api.Domain.Teachers.Teacher", null)
                        .WithMany("Assessments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TeachPlanner.Api.Domain.Assessments.AssessmentResult", "AssessmentResult", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("AssessmentId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Comments")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("varchar(1000)");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("DateMarked")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("Id", "AssessmentId");

                            b1.HasIndex("AssessmentId")
                                .IsUnique();

                            b1.ToTable("assessment_results", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AssessmentId");

                            b1.OwnsOne("TeachPlanner.Api.Domain.Assessments.AssessmentGrade", "Grade", b2 =>
                                {
                                    b2.Property<Guid>("AssessmentResultId")
                                        .HasColumnType("char(36)");

                                    b2.Property<Guid>("AssessmentResultAssessmentId")
                                        .HasColumnType("char(36)");

                                    b2.Property<string>("Grade")
                                        .IsRequired()
                                        .HasMaxLength(10)
                                        .HasColumnType("varchar(10)");

                                    b2.Property<double?>("Percentage")
                                        .IsRequired()
                                        .HasColumnType("double")
                                        .HasColumnName("Percentage");

                                    b2.HasKey("AssessmentResultId", "AssessmentResultAssessmentId");

                                    b2.ToTable("assessment_results");

                                    b2.WithOwner()
                                        .HasForeignKey("AssessmentResultId", "AssessmentResultAssessmentId");
                                });

                            b1.Navigation("Grade")
                                .IsRequired();
                        });

                    b.Navigation("AssessmentResult");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Common.Planner.SchoolEvent", b =>
                {
                    b.OwnsOne("TeachPlanner.Api.Domain.Common.Planner.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("SchoolEventId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)");

                            b1.Property<string>("Suburb")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)");

                            b1.HasKey("SchoolEventId");

                            b1.ToTable("school_events");

                            b1.WithOwner()
                                .HasForeignKey("SchoolEventId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.CurriculumSubjects.ContentDescription", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.CurriculumSubjects.Strand", null)
                        .WithMany("ContentDescriptions")
                        .HasForeignKey("StrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.CurriculumSubjects.CurriculumSubject", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.TermPlanners.TermPlan", null)
                        .WithMany("Subjects")
                        .HasForeignKey("TermPlanId");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.CurriculumSubjects.Elaboration", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.CurriculumSubjects.ContentDescription", null)
                        .WithMany("Elaborations")
                        .HasForeignKey("ContentDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.CurriculumSubjects.Strand", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.CurriculumSubjects.YearLevel", null)
                        .WithMany("Strands")
                        .HasForeignKey("YearLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.CurriculumSubjects.YearLevel", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.CurriculumSubjects.CurriculumSubject", null)
                        .WithMany("YearLevels")
                        .HasForeignKey("CurriculumSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.LessonPlans.LessonPlan", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.CurriculumSubjects.CurriculumSubject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Api.Domain.PlannerTemplates.DayPlan", null)
                        .WithMany("LessonPlans")
                        .HasForeignKey("WeekPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Api.Domain.YearDataRecords.YearData", null)
                        .WithMany("LessonPlans")
                        .HasForeignKey("YearDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("TeachPlanner.Api.Domain.LessonPlans.LessonComment", "Comments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("LessonPlanId")
                                .HasColumnType("char(36)");

                            b1.Property<bool>("Completed")
                                .HasColumnType("tinyint(1)");

                            b1.Property<DateTime?>("CompletedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<bool>("StruckOut")
                                .HasColumnType("tinyint(1)");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("Id", "LessonPlanId");

                            b1.HasIndex("LessonPlanId");

                            b1.ToTable("lesson_comment", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("LessonPlanId");
                        });

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.LessonPlans.LessonPlanResource", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.LessonPlans.LessonPlan", null)
                        .WithMany("LessonPlanResources")
                        .HasForeignKey("LessonPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Api.Domain.Teachers.Resource", null)
                        .WithMany("LessonPlanResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.PlannerTemplates.DayPlan", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.WeekPlanners.WeekPlanner", null)
                        .WithMany("DayPlans")
                        .HasForeignKey("WeekPlannerId");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.PlannerTemplates.WeekPlannerTemplate", b =>
                {
                    b.OwnsMany("TeachPlanner.Api.Domain.PlannerTemplatesPe.DayPlanTemplate", "DayPlanTemplates", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("WeekPlannerTemplateId")
                                .HasColumnType("char(36)");

                            b1.HasKey("Id");

                            b1.HasIndex("WeekPlannerTemplateId");

                            b1.ToTable("day_plan_templates", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("WeekPlannerTemplateId");

                            b1.OwnsMany("TeachPlanner.Api.Domain.PlannerTemplates.Period", "Periods", b2 =>
                                {
                                    b2.Property<Guid>("DayPlanTemplateId")
                                        .HasColumnType("char(36)");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<DateTime>("EndTime")
                                        .HasColumnType("datetime(6)");

                                    b2.Property<string>("PeriodType")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("varchar(20)");

                                    b2.Property<DateTime>("StartTime")
                                        .HasColumnType("datetime(6)");

                                    b2.HasKey("DayPlanTemplateId", "Id");

                                    b2.ToTable("Period");

                                    b2.WithOwner()
                                        .HasForeignKey("DayPlanTemplateId");
                                });

                            b1.Navigation("Periods");
                        });

                    b.Navigation("DayPlanTemplates");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Reports.Report", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.Students.Student", null)
                        .WithMany("Reports")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Api.Domain.CurriculumSubjects.CurriculumSubject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Api.Domain.Teachers.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("TeachPlanner.Api.Domain.Reports.ReportComment", "ReportComments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<int>("CharacterLimit")
                                .HasColumnType("int");

                            b1.Property<string>("Comments")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("varchar(500)");

                            b1.Property<string>("Grade")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("varchar(10)");

                            b1.Property<Guid>("ReportId")
                                .HasColumnType("char(36)");

                            b1.HasKey("Id");

                            b1.HasIndex("ReportId");

                            b1.ToTable("report_comments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ReportId");
                        });

                    b.Navigation("ReportComments");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Students.Student", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.Teachers.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Api.Domain.YearDataRecords.YearData", null)
                        .WithMany("Students")
                        .HasForeignKey("YearDataId");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Teachers.Resource", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.CurriculumSubjects.CurriculumSubject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Api.Domain.Teachers.Teacher", null)
                        .WithMany("Resources")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Teachers.Teacher", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("TeachPlanner.Api.Domain.Teachers.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("TeachPlanner.Api.Domain.Teachers.YearDataEntry", "YearDataHistory", b1 =>
                        {
                            b1.Property<Guid>("TeacherId")
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<int>("CalendarYear")
                                .HasColumnType("int")
                                .HasColumnName("CalendarYear");

                            b1.Property<Guid>("YearDataId")
                                .HasColumnType("char(36)")
                                .HasColumnName("YearDataId");

                            b1.HasKey("TeacherId", "Id");

                            b1.ToTable("year_data_entries", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TeacherId");
                        });

                    b.Navigation("YearDataHistory");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.TermPlanners.TermPlan", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.TermPlanners.TermPlanner", "TermPlanner")
                        .WithMany("TermPlans")
                        .HasForeignKey("TermPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TermPlanner");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.TermPlanners.TermPlanner", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.YearDataRecords.YearData", null)
                        .WithOne()
                        .HasForeignKey("TeachPlanner.Api.Domain.TermPlanners.TermPlanner", "YearDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.WeekPlanners.WeekPlanner", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.PlannerTemplates.WeekPlannerTemplate", "WeekPlannerTemplate")
                        .WithMany()
                        .HasForeignKey("WeekPlannerTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Api.Domain.YearDataRecords.YearData", null)
                        .WithMany("WeekPlanners")
                        .HasForeignKey("YearDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeekPlannerTemplate");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.YearDataRecords.YearData", b =>
                {
                    b.HasOne("TeachPlanner.Api.Domain.Teachers.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Api.Domain.TermPlanners.TermPlanner", null)
                        .WithOne()
                        .HasForeignKey("TeachPlanner.Api.Domain.YearDataRecords.YearData", "TermPlannerId");

                    b.OwnsMany("TeachPlanner.Api.Domain.YearDataRecords.Subject", "Subjects", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Name");

                            b1.Property<Guid>("YearDataId")
                                .HasColumnType("char(36)");

                            b1.HasKey("Id");

                            b1.HasIndex("YearDataId");

                            b1.ToTable("subjects", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("YearDataId");

                            b1.OwnsMany("TeachPlanner.Api.Domain.YearDataRecords.YearDataContentDescription", "ContentDescriptions", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("char(36)");

                                    b2.Property<string>("CurriculumCode")
                                        .IsRequired()
                                        .HasMaxLength(15)
                                        .HasColumnType("varchar(15)");

                                    b2.Property<Guid>("SubjectId")
                                        .HasColumnType("char(36)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("SubjectId");

                                    b2.ToTable("year_data_content_descriptions", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("SubjectId");
                                });

                            b1.Navigation("ContentDescriptions");
                        });

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.CurriculumSubjects.ContentDescription", b =>
                {
                    b.Navigation("Elaborations");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.CurriculumSubjects.CurriculumSubject", b =>
                {
                    b.Navigation("YearLevels");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.CurriculumSubjects.Strand", b =>
                {
                    b.Navigation("ContentDescriptions");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.CurriculumSubjects.YearLevel", b =>
                {
                    b.Navigation("Strands");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.LessonPlans.LessonPlan", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("LessonPlanResources");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.PlannerTemplates.DayPlan", b =>
                {
                    b.Navigation("LessonPlans");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Students.Student", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Teachers.Resource", b =>
                {
                    b.Navigation("LessonPlanResources");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.Teachers.Teacher", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.TermPlanners.TermPlan", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.TermPlanners.TermPlanner", b =>
                {
                    b.Navigation("TermPlans");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.WeekPlanners.WeekPlanner", b =>
                {
                    b.Navigation("DayPlans");
                });

            modelBuilder.Entity("TeachPlanner.Api.Domain.YearDataRecords.YearData", b =>
                {
                    b.Navigation("LessonPlans");

                    b.Navigation("Students");

                    b.Navigation("WeekPlanners");
                });
#pragma warning restore 612, 618
        }
    }
}
