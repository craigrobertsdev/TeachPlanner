// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeachPlanner.Infrastructure.Persistence.DbContexts;

#nullable disable

namespace TeachPlanner.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CalendarSchoolEvent", b =>
                {
                    b.Property<Guid>("CalendarId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SchoolEventsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CalendarId", "SchoolEventsId");

                    b.HasIndex("SchoolEventsId");

                    b.ToTable("CalendarSchoolEvent");
                });

            modelBuilder.Entity("LessonPlanResource", b =>
                {
                    b.Property<Guid>("LessonPlansId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ResourcesId")
                        .HasColumnType("char(36)");

                    b.HasKey("LessonPlansId", "ResourcesId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("LessonPlanResource");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolEventWeekPlanner", b =>
                {
                    b.Property<Guid>("SchoolEventsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WeekPlannerId")
                        .HasColumnType("char(36)");

                    b.HasKey("SchoolEventsId", "WeekPlannerId");

                    b.HasIndex("WeekPlannerId");

                    b.ToTable("SchoolEventWeekPlanner");
                });

            modelBuilder.Entity("StudentStudentsForYear", b =>
                {
                    b.Property<Guid>("StudentsForYearId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("char(36)");

                    b.HasKey("StudentsForYearId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("StudentStudentsForYear");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Assessments.Assessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("ConductedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LessonPlanId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("YearLevel")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("assessment_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LessonPlanId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Assessment");

                    b.HasDiscriminator<string>("assessment_type").HasValue("Assessment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TeachPlanner.Domain.Assessments.SummativeAssessmentResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateMarked")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("summative_assessment_results", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.Calendar.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("TermEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TermNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("TermStart")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("calendar", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.Common.Planner.SchoolEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EventEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EventStart")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("FullDay")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("school_events", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.LessonPlans.LessonPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NumberOfPeriods")
                        .HasColumnType("int");

                    b.Property<string>("PlanningNotes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("WeekPlannerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("WeekPlannerId");

                    b.ToTable("lesson_plans", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.Reports.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("YearLevel")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.Resources.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<string>("AssociatedStrands")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAssessment")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("resources", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.Students.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.Students.YearData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CalendarYear")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<string>("_yearLevels")
                        .HasColumnType("longtext")
                        .HasColumnName("YearLevels");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("students_for_year", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.ContentDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CurriculumCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid?>("StrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("SubstrandId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StrandId");

                    b.HasIndex("SubstrandId");

                    b.ToTable("content_descriptions", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.Elaboration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ContentDescriptionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ContentDescriptionId");

                    b.ToTable("elaborations", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.Strand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("YearLevelId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("YearLevelId");

                    b.ToTable("strands", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCurriculumSubject")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("TermPlanId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("TermPlanId");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.Substrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("StrandId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StrandId");

                    b.ToTable("substrands", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.YearLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AchievementStandard")
                        .HasColumnType("longtext");

                    b.Property<int?>("BandLevelValue")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("YearLevelDescription")
                        .HasColumnType("longtext");

                    b.Property<int?>("YearLevelValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("year_levels", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.Teachers.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("teachers", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.TermPlanners.TermPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("TermNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("TermPlannerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TermPlannerId");

                    b.ToTable("term_plans", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.TermPlanners.TermPlanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<int>("CalendarYear")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<string>("_yearLevels")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("YearLevels");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("term_planner", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.WeekPlanners.WeekPlanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("WeekStart")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("TeacherId");

                    b.ToTable("week_planner", (string)null);
                });

            modelBuilder.Entity("TeachPlanner.Domain.Assessments.FormativeAssessment", b =>
                {
                    b.HasBaseType("TeachPlanner.Domain.Assessments.Assessment");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("formative");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Assessments.SummativeAssessment", b =>
                {
                    b.HasBaseType("TeachPlanner.Domain.Assessments.Assessment");

                    b.Property<DateTime>("DateScheduled")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PlanningNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ResultId");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("summative");
                });

            modelBuilder.Entity("CalendarSchoolEvent", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Calendar.Calendar", null)
                        .WithMany()
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Domain.Common.Planner.SchoolEvent", null)
                        .WithMany()
                        .HasForeignKey("SchoolEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonPlanResource", b =>
                {
                    b.HasOne("TeachPlanner.Domain.LessonPlans.LessonPlan", null)
                        .WithMany()
                        .HasForeignKey("LessonPlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Domain.Resources.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolEventWeekPlanner", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Common.Planner.SchoolEvent", null)
                        .WithMany()
                        .HasForeignKey("SchoolEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Domain.WeekPlanners.WeekPlanner", null)
                        .WithMany()
                        .HasForeignKey("WeekPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentStudentsForYear", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Students.YearData", null)
                        .WithMany()
                        .HasForeignKey("StudentsForYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Domain.Students.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Domain.Assessments.Assessment", b =>
                {
                    b.HasOne("TeachPlanner.Domain.LessonPlans.LessonPlan", null)
                        .WithMany("Assessments")
                        .HasForeignKey("LessonPlanId");

                    b.HasOne("TeachPlanner.Domain.Students.Student", null)
                        .WithMany("Assessments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Domain.Subjects.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Domain.Assessments.SummativeAssessmentResult", b =>
                {
                    b.OwnsOne("TeachPlanner.Domain.Assessments.AssessmentGrade", "Grade", b1 =>
                        {
                            b1.Property<Guid>("SummativeAssessmentResultId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Grade")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("varchar(10)");

                            b1.Property<double?>("Percentage")
                                .HasColumnType("double");

                            b1.HasKey("SummativeAssessmentResultId");

                            b1.ToTable("summative_assessment_results");

                            b1.WithOwner()
                                .HasForeignKey("SummativeAssessmentResultId");
                        });

                    b.Navigation("Grade")
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Domain.Common.Planner.SchoolEvent", b =>
                {
                    b.OwnsOne("TeachPlanner.Domain.Common.Planner.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("SchoolEventId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)");

                            b1.Property<string>("Suburb")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)");

                            b1.HasKey("SchoolEventId");

                            b1.ToTable("school_events");

                            b1.WithOwner()
                                .HasForeignKey("SchoolEventId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Domain.LessonPlans.LessonPlan", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Subjects.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Domain.Teachers.Teacher", null)
                        .WithMany("LessonPlans")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Domain.WeekPlanners.WeekPlanner", null)
                        .WithMany("LessonPlans")
                        .HasForeignKey("WeekPlannerId");

                    b.OwnsMany("TeachPlanner.Domain.LessonPlans.LessonComment", "Comments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("LessonPlanId")
                                .HasColumnType("char(36)");

                            b1.Property<bool>("Completed")
                                .HasColumnType("tinyint(1)");

                            b1.Property<DateTime?>("CompletedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<bool>("StruckOut")
                                .HasColumnType("tinyint(1)");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("Id", "LessonPlanId");

                            b1.HasIndex("LessonPlanId");

                            b1.ToTable("lesson_comment", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("LessonPlanId");
                        });

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Reports.Report", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Students.Student", null)
                        .WithMany("Reports")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Domain.Subjects.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Domain.Teachers.Teacher", null)
                        .WithMany("Reports")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("TeachPlanner.Domain.Reports.ReportComment", "ReportComments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<int>("CharacterLimit")
                                .HasColumnType("int");

                            b1.Property<string>("Comments")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("varchar(500)");

                            b1.Property<string>("Grade")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("varchar(10)");

                            b1.Property<Guid>("ReportId")
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("SubjectId")
                                .HasColumnType("char(36)");

                            b1.HasKey("Id");

                            b1.HasIndex("ReportId");

                            b1.ToTable("report_comments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ReportId");
                        });

                    b.Navigation("ReportComments");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Resources.Resource", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Subjects.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Domain.Teachers.Teacher", null)
                        .WithMany("Resources")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Students.YearData", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Teachers.Teacher", null)
                        .WithMany("YearData")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.ContentDescription", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Subjects.Strand", "Strand")
                        .WithMany("ContentDescriptions")
                        .HasForeignKey("StrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeachPlanner.Domain.Subjects.Substrand", "Substrand")
                        .WithMany("ContentDescriptions")
                        .HasForeignKey("SubstrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Strand");

                    b.Navigation("Substrand");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.Elaboration", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Subjects.ContentDescription", "ContentDescription")
                        .WithMany("Elaborations")
                        .HasForeignKey("ContentDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentDescription");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.Strand", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Subjects.YearLevel", "YearLevel")
                        .WithMany("Strands")
                        .HasForeignKey("YearLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("YearLevel");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.Subject", b =>
                {
                    b.HasOne("TeachPlanner.Domain.TermPlanners.TermPlan", null)
                        .WithMany("Subjects")
                        .HasForeignKey("TermPlanId");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.Substrand", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Subjects.Strand", "Strand")
                        .WithMany("Substrands")
                        .HasForeignKey("StrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strand");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.YearLevel", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Subjects.Subject", "Subject")
                        .WithMany("YearLevels")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("TeachPlanner.Domain.TermPlanners.TermPlan", b =>
                {
                    b.HasOne("TeachPlanner.Domain.TermPlanners.TermPlanner", "TermPlanner")
                        .WithMany("TermPlans")
                        .HasForeignKey("TermPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TermPlanner");
                });

            modelBuilder.Entity("TeachPlanner.Domain.TermPlanners.TermPlanner", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Teachers.Teacher", null)
                        .WithMany("TermPlanners")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Domain.WeekPlanners.WeekPlanner", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Calendar.Calendar", null)
                        .WithMany("WeekPlanners")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Domain.Teachers.Teacher", null)
                        .WithMany("WeekPlanners")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Assessments.FormativeAssessment", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Teachers.Teacher", null)
                        .WithMany("FormativeAssessments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeachPlanner.Domain.Assessments.SummativeAssessment", b =>
                {
                    b.HasOne("TeachPlanner.Domain.Assessments.SummativeAssessmentResult", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachPlanner.Domain.Teachers.Teacher", null)
                        .WithMany("SummativeAssessments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Calendar.Calendar", b =>
                {
                    b.Navigation("WeekPlanners");
                });

            modelBuilder.Entity("TeachPlanner.Domain.LessonPlans.LessonPlan", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Students.Student", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.ContentDescription", b =>
                {
                    b.Navigation("Elaborations");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.Strand", b =>
                {
                    b.Navigation("ContentDescriptions");

                    b.Navigation("Substrands");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.Subject", b =>
                {
                    b.Navigation("YearLevels");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.Substrand", b =>
                {
                    b.Navigation("ContentDescriptions");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Subjects.YearLevel", b =>
                {
                    b.Navigation("Strands");
                });

            modelBuilder.Entity("TeachPlanner.Domain.Teachers.Teacher", b =>
                {
                    b.Navigation("FormativeAssessments");

                    b.Navigation("LessonPlans");

                    b.Navigation("Reports");

                    b.Navigation("Resources");

                    b.Navigation("YearData");

                    b.Navigation("SummativeAssessments");

                    b.Navigation("TermPlanners");

                    b.Navigation("WeekPlanners");
                });

            modelBuilder.Entity("TeachPlanner.Domain.TermPlanners.TermPlan", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("TeachPlanner.Domain.TermPlanners.TermPlanner", b =>
                {
                    b.Navigation("TermPlans");
                });

            modelBuilder.Entity("TeachPlanner.Domain.WeekPlanners.WeekPlanner", b =>
                {
                    b.Navigation("LessonPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
